library(fpp3)
head(us_change)

us_change %>% 
  pivot_longer(  #그림그리기 편하라고 wider자료를 longer로 변환
    cols = c("Consumption", "Income"),
    names_to = "Series",
    values_to = "value"
  ) -> us_change2
us_change2

us_change2 %>% 
  autoplot(value) + labs(y="% change")


#소득과 지출간의 선형관계
us_change %>% 
  ggplot(aes(x = Income, y = Consumption)) +
  geom_point(size = 1.2) +
  geom_smooth(formula = y ~ x, method = "lm", se = FALSE) +  #method = "lm"은 linear regerssion을 의미
  labs(
    x = "Income (quarterly % change)",
    y = "Consumption (quaterly % change)"
  )

us_change %>% 
  model(TSLM(Consumption ~ Income)) %>%  #forcast구문이랑 약간 다른 문법
  report() #결과물 출력 / Consumption= 0.54454 + 0.27183 × Income  선형식이 도출


#Multiple linear model
us_change %>% 
  pivot_longer(
    cols = c("Production", "Savings", "Unemployment"),
    names_to = "Series",
    values_to = "value") -> us_change2

us_change2

us_change2 %>%  autoplot(value, show.legend = FALSE) +
  labs(y = "% change") +
  facet_wrap(. ~ Series, scales = "free_y", nrow = 3)

##각 변수들간의 상관관계를 확인
library(GGally)

us_change %>% 
  ggpairs(columns = 2:6)


#Least Squares Estimation
fit_consMR <- us_change %>% 
  model(tslm = TSLM(formula = Consumption ~ Income + Production + Unemployment + Savings)) #단점: 미래를 예측하는 것이 안됨
fit_consMR %>% 
  report()
###TSLM이 time serise 모형과 lenir모형 둘 다 세울 수 있음. 하지만 시계열 모형으로써의 가치는 떨어짐. 미래 시간 고려를 못하기 때문.


#Fitted values
fit_consMR %>% 
  augment() #augment() 함수를 사용하여 적합된 값을 출력

fit_consMR %>% 
  augment() %>% 
  ggplot(aes(x = Quarter)) +
  geom_line(aes(y = Consumption, colour = "Data")) +
  geom_line(aes(y = .fitted, colour = "Fitted")) +
  labs(y = NULL, title = "Percent change in US consumption expenditure") +
  scale_colour_manual(values = c(Data = "black", Fitted = "#D55E00")) +
  guides(colour = guide_legend(title = NULL))


#ACF plot of residuals & Histogram of residuals (자기상관성, 독립성)
fit_consMR %>% 
  gg_tsresiduals() #gg_tsresiduals() 함수를 통해 잔차항에 대한 진단가능


#Residual plots against predictors
fit_consMR %>% 
  residuals()

us_change %>% 
  left_join(residuals(fit_consMR), by = "Quarter") %>% 
  pivot_longer(
    cols = Income:Unemployment,
    names_to = "regressor",
    values_to = "x"
  ) %>% 
  ggplot(aes(x = x, y = .resid)) +
  geom_point(size = 1.2) +
  facet_wrap(. ~ regressor, scales = "free_x") +
  labs(x = NULL, y = "Residuals")


#Residual plots against fitted values
fit_consMR %>% 
  augment() %>% 
  ggplot(aes(x = .fitted, y = .resid)) +
  geom_point(size = 1.2) +
  labs(x = "Fitted", y = "Residuals")

#Outliers and influential observations

#Spurious regression
temp_fit <- aus_airpassengers %>% 
  filter(Year <= 2011) %>% 
  left_join(guinea_rice, by = "Year") %>% 
  model(TSLM(Passengers ~ Production))

temp_fit %>% 
  report()

temp_fit %>% 
  gg_tsresiduals()

#Trend

#Dummy variables


#Seasonal dummy variables ★중요★
recent_production <- aus_production %>% 
  filter(year(Quarter) >= 1992)

recent_production %>% 
  autoplot(Beer) +
  labs(y = "Megalitres", title = "Australian quarterly beer production")

##trend() 함수와 season() 함수는 디폴트로 들어가는 표준함수X. 필요 시 TSLM() 함수 안에서 적용
fit_beer <- recent_production %>% 
  model(TSLM(formula = Beer ~ trend() + season()))

fit_beer %>% 
  report()  #호주는 한국과 계절이 반대. 1분기=여름에 맥주 많이먹음. 4분기=연말 축제. 2분기에 공장 쉬어.

"""적합된 결과를 확인해보면 분기당 평균 -0.34 감소 추세가 있음.
평균적으로 2분기는 1분기보다 -34.7, 3분기는 1분기보다 -17.8, 반면 4분기는 1분기보다 72.8 정도 생산량이 많음."""

fit_beer %>% 
  augment() %>% 
  ggplot(aes(x = Quarter)) +
  geom_line(aes(y = Beer, colour = "Data")) +
  geom_line(aes(y = .fitted, colour = "Fitted")) +
  scale_colour_manual(values = c(Data = "black", Fitted = "#D55E00")) +
  labs(y = "Megalitres", title = "Australian quarterly beer production") +
  guides(colour = guide_legend(title = "Series"))

##아래 그래프와 같이 분기별 실제 맥주 생산량과 예상치를 표현
fit_beer %>% 
  augment() %>% 
  ggplot(aes(x = Beer, y = .fitted, colour = factor(quarter(Quarter)))) +
  geom_point(size = 1.6) +
  labs(x = "Actual values", y = "Fitted", title = "Australian quarterly beer production") +
  geom_abline(intercept = 0, slope = 1) +
  guides(colour = guide_legend(title = "Quarter"))

#Intervention variables


#Fourier series
recent_production %>% 
  model(TSLM(formula = Beer ~ trend() + fourier(K = 2))) %>% #K arguments는 몇개의 sin, cos 항을 포함시킬지 결정하는 부분/m이 계절 주기라고 할 때 허용되는 K의 최대값은 K=m/2
  report() #긴 계절 기간 동안 계절 더미 변수를 사용할 때 대안 중 하나는 푸리에(Fourier) 항을 사용하는 것/fourier를 넣으면 하모니 모형이 됨

#비교
recent_production %>% 
  model(TSLM(formula = Beer ~ trend() + fourier(K = 2)))->model1
recent_production %>% 
  model(TSLM(formula = Beer ~ trend() + season()))->model2

forecast(model1)
forecast(model2)
        

#Selecting predictors
fit_consMR %>% 
  glance() %>% 
  select(adj_r_squared, CV, AIC, AICc, BIC)

model1 %>% 
  glance() %>% 
  select(adj_r_squared, CV, AIC, AICc, BIC)

model2%>% 
  glance() %>% 
  select(adj_r_squared, CV, AIC, AICc, BIC)

"""adj_r_squared는 높으면 높을 수록 좋고, 나머지는 낮으면 낮을 수록 좋음. 이걸 볼 때 원래는 fourier가 더 좋치만 현재는 큰 차이가 없음."""

#Adjusted R-squared

#Cross-validation

#Akaike’s Information Criterion

#Corrected Akaike’s Information Criterion

#Schwarz’s Bayesian Information Criterion

#Which measure should we use?


#Forecasting with regression
fit_beer %>% 
  report()

fc_beer <- fit_beer %>% 
  forecast()
fc_beer

fc_beer %>% 
  autoplot(recent_production) +
  labs(y = "megalitres", title = "Forecasts of beer production using regression")

us_change

"""여기서 시나리오는 아래와 같이 셋팅
고용률(Unemployment 관련)의 변화 없이 소득(Income)과 저축(Savings)이 각각 1%와 0.5%로 증가하거나 감소
예측을 위한 시나리오 셋팅은 scenarios() 함수를 통해 구성해볼 수 있습니다."""
## 회귀모형 적합
fit_consBest <- us_change %>% 
  model(lm = TSLM(formula = Consumption ~ Income + Savings + Unemployment))

## 시나리오 구성
future_scenarios <- scenarios(
  Increase = new_data(us_change, 4) %>% 
    mutate(
      Income = 1,
      Savings = 0.5,
      Unemployment = 0
    ),
  Decrease = new_data(us_change, 4) %>%  #tsibble 라이브러리 내 new_data() 함수는 key-index 조합으로 원하는 시점만큼의 미래 값을 생성해주는 함수
    mutate(
      Income = -1,
      Savings = -0.5,
      Unemployment = 0
    ),
  names_to = "Scenario"
)

future_scenarios

fc <- fit_consBest %>% 
  forecast(new_data = future_scenarios) #시나리오 구성을 forecast() 함수 내 new_data argument에 적용

fc

us_change %>% 
  autoplot(Consumption) +
  autolayer(fc) +
  labs(title = "US consumption", y = "% change") #autolayer() 함수에 시나리오 예측 적용 객체를 씌워주어 시각화


#Nonlinear regression
boston_men <- boston_marathon %>% 
  filter(Year >= 1924 & Event == "Men's open division") %>% 
  mutate(Minutes = as.numeric(Time)/60)

boston_men

boston_men %>% 
  autoplot(Minutes) +
  geom_smooth(formula = y ~ x, se = FALSE, method = "lm") +
  labs(x = "Year", y = "Minutes")

boston_men %>% 
  model(TSLM(formula = Minutes ~ trend())) %>% 
  gg_tsresiduals()
"시간이 지남에 따라 감소하는 듯한 선형 추이를 보이지만, 선형추세로 나온 잔차를 보면 비선형 패턴"

fit_trends <- boston_men %>% #아래 코드와 같이 자연로그 또는 piecewise reg. 등을 적합시켜 비교
  model(
    linear = TSLM(formula = Minutes ~ trend()),
    exponential = TSLM(formula = log(Minutes) ~ trend()),
    piecewise = TSLM(formula = Minutes ~ trend(knots = c(1950, 1980)))
  )

fc_trends <- fit_trends %>% 
  forecast(h = 10)

boston_men %>% 
  autoplot(Minutes) +
  geom_line(data = fit_trends %>% fitted(), aes(y = .fitted, colour = .model)) +
  autolayer(fc_trends, alpha = 0.5, level = 95) +
  labs(y = "Minutes", title = "Boston marathon winning times")
